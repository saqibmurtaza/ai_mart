import { defineType, defineField, PreviewValue, PrepareViewOptions } from 'sanity';


export default defineType({
  name: 'homepageSection',
  title: 'Homepage Section',
  type: 'document',
  fields: [
    defineField({
      name: 'title',
      title: 'Title',
      type: 'string',
      // Explicitly type 'Rule'
      validation: (Rule) => Rule.required(),
    }),
    {
      name: 'description',
      title: 'Description',
      type: 'array', // Use 'array' for Portable Text
      of: [
        {
          type: 'block', // Standard Portable Text block
          styles: [
            { title: 'Normal', value: 'normal' },
            { title: 'H1', value: 'h1' },
            // Add other styles if needed
          ],
          lists: [{ title: 'Bullet', value: 'bullet' }],
          marks: {
            decorators: [{ title: 'Strong', value: 'strong' }, { title: 'Emphasis', value: 'em' }],
            annotations: [],
          },
        },
      ],
    },
    {
      name: 'image',
      title: 'Image',
      type: 'image',
      options: {
        hotspot: true, // Allows cropping
      },
      fields: [
        defineField({
          name: 'alt',
          type: 'string',
          title: 'Alternative text',
          description: 'Important for SEO and accessibility.',
        }),
      ],
    },
    {
      name: 'slug',
      title: 'Slug',
      type: 'slug',
      options: {
        source: 'title', // Generate slug from the title
        maxLength: 96,
      },
      // Explicitly type 'Rule'
      validation: (Rule) => Rule.required(),
    },
  ],

preview: {
    select: {
      title: 'title',
      media: 'image',
    },
    prepare(value: Record<string, any>, viewOptions?: PrepareViewOptions): PreviewValue {
      const { title, media } = value; // <<<< DESTRUCTURE HERE
      return {
        title: title,
        media: media,
      };
    },
  },
});


// import { defineType, defineField, PreviewValue, PrepareViewOptions } from 'sanity';

// export default defineType({
//   name: 'homepageSection',
//   title: 'Homepage Section',
//   type: 'document',
//   fields: [
//     defineField({
//       name: 'title',
//       title: 'Title',
//       type: 'string',
//       validation: (Rule) => Rule.required(),
//     }),
//     // --- ADDED: Subtitle to match Content Block ---
//     defineField({ 
//       name: 'subtitle', 
//       title: 'Subtitle (Optional)', 
//       type: 'string', 
//       description: 'A shorter heading that appears above the main title.' 
//     }),
//     {
//       name: 'description',
//       title: 'Description',
//       type: 'array', // Use 'array' for Portable Text
//       of: [
//         {
//           type: 'block', // Standard Portable Text block
//           styles: [
//             { title: 'Normal', value: 'normal' },
//             { title: 'H1', value: 'h1' },
//             // Add other styles if needed
//           ],
//           lists: [{ title: 'Bullet', value: 'bullet' }],
//           marks: {
//             decorators: [{ title: 'Strong', value: 'strong' }, { title: 'Emphasis', value: 'em' }],
//             annotations: [],
//           },
//         },
//       ],
//     },
//     {
//       name: 'image',
//       title: 'Image',
//       type: 'image',
//       options: {
//         hotspot: true, // Allows cropping
//       },
//       fields: [
//         defineField({
//           name: 'alt',
//           type: 'string',
//           title: 'Alternative text',
//           description: 'Important for SEO and accessibility.',
//         }),
//       ],
//     },
//     // --- ADDED: Image layout to match Content Block ---
//     defineField({ 
//       name: 'imageLeft', 
//       title: 'Image on Left?', 
//       type: 'boolean', 
//       initialValue: true, 
//       description: 'If checked, image appears on left; otherwise, image on right.' 
//     }),
//     // --- ADDED: CTA fields to match Content Block ---
//     defineField({ 
//       name: 'callToActionText', 
//       title: 'Call to Action Button Text (Optional)', 
//       type: 'string' 
//     }),
//     defineField({ 
//       name: 'callToActionUrl', 
//       title: 'Call to Action URL (Optional)', 
//       type: 'url' 
//     }),
//     // --- ADDED: Order field to match Content Block ---
//     defineField({
//       name: 'order',
//       title: 'Order',
//       type: 'number',
//       description: 'Determines the display order of sections on the homepage.',
//       validation: (Rule) => Rule.integer().min(0),  // Optional, but added for consistency (not required)
//     }),
//     // --- ADDED: Featured product reference to match Content Block (for one product per category) ---
//     defineField({
//       name: 'featuredProduct',
//       title: 'Featured Product',
//       type: 'reference',
//       to: [{ type: 'product' }],  // Assumes your product schema type is 'product'
//       description: 'Select one product from a category to feature in this section. Use the description field for a short explanation.',
//       // No validation (optional by default)
//     }),
//     {
//       name: 'slug',
//       title: 'Slug',
//       type: 'slug',
//       options: {
//         source: 'title', // Generate slug from the title
//         maxLength: 96,
//       },
//       // Explicitly type 'Rule'
//       validation: (Rule) => Rule.required(),
//     },
//   ],
//   preview: {
//     select: {
//       title: 'title',
//       subtitle: 'subtitle',
//       media: 'image',
//       imageLeft: 'imageLeft',
//       order: 'order',
//     },
//     // --- UPDATED: Preview logic to match Content Block exactly ---
//     prepare(value: Record<string, any>, viewOptions?: PrepareViewOptions): PreviewValue {
//       const { title, subtitle, media, imageLeft, order } = value; // Destructure here
//       const layoutText = imageLeft ? 'Image Left' : 'Image Right';
//       return {
//         title: `${order}. ${title}`,
//         subtitle: `${subtitle || ''} [Layout: ${layoutText}]`,
//         media: media,
//       };
//     },
//   },
// });
